#!/usr/bin/env node

var fs = require('fs');
var glob = require('glob');
var path = require('path');
var transform = require('..');

if (!/shopify/i.test(path.basename(process.cwd()))) {
  throw new Error('You must run this command from the root of the Shopify repo.');
}

var pattern = process.argv[2];
var files = getFiles(pattern);
var errors = {};

if (files.length === 0) {
  throw new Error('No .coffee files found for "' + process.argv[2] + '".');
}

files.forEach(handleFile);

var errorKeys = Object.keys(errors);

if (errorKeys.length > 0) {
  console.log();
  console.log('Errors:');

  errorKeys.forEach(function(error) {
    console.log('\t' + error);

    errors[error].forEach(function(filePath) {
      console.log('\t\t' + filePath);
    });
  });
}

function getFiles(filePattern) {
  if (filePattern == null) {
    throw new Error('Pass in a .coffee file, or glob pattern.');
  }

  return glob
    .sync(filePattern, {ignore: ['node_modules/**', 'vendor/**']})
    .filter(function(filePath) { return filePath.match(/\.coffee$/); });
}

function handleFile(filePath) {
  var source = fs.readFileSync(filePath, {encoding: 'utf8'});
  try {
    var transformed = transform(source, {testTransforms: filePath.indexOf('test') >= 0});
    writeJavaScriptFile(filePath, transformed);
  } catch (error) {
    handleTransformError(filePath, error);
  }
}

function handleTransformError(filePath, error) {
  var errorType;
  var errorLocation;
  var errorInfo = error.message.match(/^(.+) (\(.+?\))$/);

  if (errorInfo) {
    errorType = errorInfo[1];
    errorLocation = errorInfo[2];
  } else {
    errorType = error.message;
    errorLocation = '';
  }

  errors[errorType] = errors[errorType] || [];
  errors[errorType].push(filePath + ' ' + errorLocation);

  console.error(filePath);
  console.error(error.stack);
}

function writeJavaScriptFile(filePath, transformed) {
  var newFile = path.join(
    path.dirname(filePath),
    path.basename(filePath, '.coffee').replace(/_/g, '-') + '.js'
  );

  fs.writeFileSync(newFile, transformed);
  console.log(filePath + ' => ' + newFile);
}
